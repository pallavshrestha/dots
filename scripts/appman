#!/usr/bin/env bash

DIR="$( cd "$( dirname "$0" )" && pwd )"
CLI=$(basename "$0")

SCRIPTDIR="$(if command -v xdg-user-dir &>/dev/null; then xdg-user-dir DESKTOP; else echo $HOME; fi)"

# Check XDG variables
if [ -n "$XDG_CONFIG_HOME" ]; then
	APPMANCONFIG="$XDG_CONFIG_HOME/appman"
else
	APPMANCONFIG="$HOME/.config/appman"
fi

if [ -n "$XDG_DATA_HOME" ]; then
        DATADIR="$XDG_DATA_HOME"
else
        DATADIR="$HOME/.local/share"
fi

function _am(){
	AMCLI="am"
	AMCLIPATH="$AMCLI"
	SUDOCOMMAND="sudo"
	COMPLETIONPATH="/etc/bash_completion.d"
	COMPLETIONFILE="am-completion.sh"
	APPSPATH="/opt"
	AMPATH="$APPSPATH/$AMCLI"
	mkdir -p "$AMPATH"/.cache
	mkdir -p "$AMPATH"/modules
}

function _appman() {
	# Helper functions defined inside the parent function
	function prompt_for_directory() {
		local location
		read -r -ep "Please, write the name or the path of your custom application's folder: $(echo -e '\n\n '$HOME'/')" location
		echo "$location"
	}

	function validate_directory() {
		local location=$1
		if [[ "$location" == "" ]]; then
			echo -e "--------------------------------------------------------------------------"
			echo "OPERATION ABORTED!"
			exit  1
		elif [[ "$location" == ".local/bin" ]]; then
			echo -e "--------------------------------------------------------------------------\n"
			echo -e " ðŸ’€ ERROR, you can't install applications into a '$PATH'\n\n The directory ~/.local/bin and 'bin' folders are used for executables.\n\n Please, choose a different path and retry! \n"
			echo -e "--------------------------------------------------------------------------\n"
			exit  1
			else
			local location_appman="${location/#$HOME}"
			location_appman="${location_appman// /-}"
			location_appman="${location_appman#/}"
			location_appman="${location_appman%/}"
			echo "$location_appman"
		fi
	}

	function initialize_appman() {
		APPSDIR=$1
		mkdir -p ~/"$APPSDIR"/appman/.cache
		mkdir -p ~/"$APPSDIR"/appman/modules
		mkdir -p ~/.local/bin "$DATADIR"/applications "$DATADIR"/icons
		AMCLI="appman"
		AMCLIPATH="$DIR/$AMCLI"
		SUDOCOMMAND=""
		COMPLETIONPATH="$HOME"
		COMPLETIONFILE=".bash_completion"
		APPSPATH="$HOME/$APPSDIR"
		AMPATH="$HOME/$APPSDIR/$AMCLI"
	}

	# Main execution
	if [[ ! -f "$APPMANCONFIG"/appman-config ]]; then
		echo "--------------------------------------------------------------------------"
		echo " >>> Thank you for choosing AppMan!"
		echo "--------------------------------------------------------------------------"
		echo "Before proceeding with any task, write the name of the directory in which"
		echo 'you will install the apps, for example "Programs" or "My-apps", you can '
		echo 'also choose a subfolder, for example ".local/My-apps" or a deeper path.'
		echo -e "\nThe destination folder will be created in $HOME"
		echo -e "\nSYNTAX: PATH/TO/DIRNAME\n"
		echo 'NOTE, any spaces or "/" at the beginning and end will be removed. If you '
		echo 'decide to change your choice in the future, first remove all the programs'
		echo 'and then edit the ~/.config/appman/appman-config text file.'
		echo -e "--------------------------------------------------------------------------\n"

		local location=$(prompt_for_directory)
		local validated_location=$(validate_directory "$location")
		mkdir -p "$APPMANCONFIG"
		echo "$validated_location" >> "$APPMANCONFIG"/appman-config
		echo '--------------------------------------------------------------------------'
		echo 'You are ready! Start installing your favorite apps locally!!'
		echo "All apps will be installed in $HOME/$validated_location"
		echo -e '\nIn case of problems, use the option "-h".'
		echo '--------------------------------------------------------------------------'
	fi
	initialize_appman "$(<"$APPMANCONFIG"/appman-config)"
}

if [[ "$DIR/$CLI" == "/usr/local/bin/am" ]] 2>/dev/null; then
	_am
else
	_appman
fi

function _online_check(){
	if ! wget -q --tries=10 --timeout=20 --spider https://github.com; then
		echo -e "\n $AMCLI is offline, please check your internet connection and try again\n"
		exit
	fi
}

# Determine catalogue in use
export AMCATALOGUEMARKDOWNS="https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps"
export AMCATALOGUEICONS="https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/icons"

# Determine system architecture and current user
export arch="$HOSTTYPE"
export currentuser="$USER"

if [[ -f "$AMPATH"/new-repo.txt ]]; then
	AMREPO=$(<"$AMPATH/new-repo.txt") # Utilizing command substitution with < for more efficient file reading
	APPSDB="$AMREPO/programs/$arch"
	APPSLISTDB="$AMREPO/programs/$arch-apps"
	LIBSLISTDB="$AMREPO/programs/libs-list"
	if [[ "$@" != "newrepo off" ]]; then
		echo '--------------------------------------------------------------------------'
		echo " Source: $AMREPO"
		echo '--------------------------------------------------------------------------'
	fi
else
	AMREPO="https://raw.githubusercontent.com/IVAN-HC/AM/main" # Consolidating variable assignments for clarity and brevity
	APPSDB="$AMREPO/programs/$arch"
	APPSLISTDB="$AMREPO/programs/$arch-apps"
	LIBSLISTDB="$AMREPO/programs/libs-list"
fi

# To implement future application database changes
if [ -f "$AMPATH/neodb" ]; then
	if grep -q "://" "$AMPATH/neodb"; then
		if grep -q "#STATUS=quiet" "$AMPATH/neodb"; then
			case "$1" in
			'-a'|'about'|'-d'|'download'|'-i'|'install'|'-l'|'list'|'-q'|'query')
				echo '--------------------------------------------------------------------------'
				echo " Source: Third party repositories are enabled"
				echo '--------------------------------------------------------------------------'
				;;
			esac
		fi
	fi
fi

# Check for essential commands required by the application
missing_deps=()
for name in cat chmod chown curl grep sed wget; do
	if ! command -v "$name" &>/dev/null; then
		printf "\nERROR: command \"%s\" not found, strongly needed by \"%s\"!\n" "$name" "$AMCLI"
	missing_deps+=("$name")
	fi
done

# Exit if any essential command is missing
if [ -n "$missing_deps" ]; then
  printf "\nMissing essential commands: %s\nInstall the above and try again\n\n" "${missing_deps[*]}"
  exit 1
fi

rm -rf "$AMPATH/options"
cat <<-HEREDOC >> "$AMPATH/options"
	about
	apikey
	backup
	clean
	download
	files
	install
	list
	lock
	newrepo
	nolibfuse
	overwrite
	query
	remove
	sync
	template
	test
	unlock
	update
	web
	--apps
	--convert
	--debug
	--disable-completion
	--enable-completion
	--firejail
	--force-latest
	--home
	--launcher
	--less
	--libs
	--rollback
	--sandbox
	--user
HEREDOC

function _no_sudo(){
	if [ -n "$SUDO_COMMAND" ]; then 
		printf "\n WARNING: You don't need to use SUDO for this.\n\n"; 
		exit 1; 
	fi
}

function _patch_bashrc_and_profile(){
	# Check if the custom PATH is not already in .bashrc, then append it (fix - exclamation mark negates the entire command substitution)
	if test -f "$HOME/.bashrc"; then
		if ! grep -q 'export PATH=$PATH:$HOME/.local/bin' "$HOME/.bashrc"; then
			echo 'export PATH=$(echo $PATH | tr ":" "\n" | grep -v "/.local/bin" | tr "\n" ":" | sed ''s/.$//'')' >> "$HOME/.bashrc"
			echo -e 'export PATH=$PATH:$HOME/.local/bin\n' >> "$HOME/.bashrc"
		fi
	fi
	# Correct the order of .local/bin in .profile if necessary
	if test -f "$HOME/.profile"; then
		if grep -q 'PATH="$HOME/.local/bin:$PATH"' "$HOME/.profile"; then
			sed -i 's#PATH="$HOME/.local/bin:$PATH"#PATH="$PATH:$HOME/.local/bin"#g' "$HOME/.profile"
		fi
	elif test -f "$HOME/.bash_profile"; then
		if grep -q 'PATH="$HOME/.local/bin:$PATH"' "$HOME/.bash_profile"; then
			sed -i 's#PATH="$HOME/.local/bin:$PATH"#PATH="$PATH:$HOME/.local/bin"#g' "$HOME/.bash_profile"
		fi
	fi
}

# Check if the script is called with 'appman' and if so, perform initial setup
[ "$AMCLI" = "appman" ] && {
	_no_sudo
	_patch_bashrc_and_profile
}

# Set header authorization if GitHub API key file exists
[ -f "$AMPATH/ghapikey.txt" ] && HeaderAuthWithGITPAT=" --header \"Authorization: token $(<"$AMPATH/ghapikey.txt")\" "

case "$1" in

  '')	echo -e "\n USAGE: '$AMCLI [option]'\n        '$AMCLI [option] [argument]'\n\n Run the '$AMCLI -h' command to find out more\n";;

  '-h'|'help')

	if ! test -f "$AMPATH"/modules/help.am; then
		wget -q "$AMREPO"/modules/help.am -O "$AMPATH"/modules/help.am
		chmod a+x "$AMPATH"/modules/help.am
	fi

	source "$AMPATH"/modules/help.am
  	;;

  '-a'|'about'|'-l'|'list'|'-q'|'query')

	_no_sudo

	[[ -f "$AMPATH"/modules/database.am ]] || {
		wget -q "$AMREPO"/modules/database.am -O "$AMPATH"/modules/database.am
		chmod a+x "$AMPATH"/modules/database.am
	}

	source "$AMPATH"/modules/database.am "$@"
	;;

  '-b'|'backup'|'-o'|'overvrite'|'lock'|'unlock')

	_no_sudo

	if ! test -f "$AMPATH"/modules/no-updates.am; then
		wget -q "$AMREPO"/modules/no-updates.am -O "$AMPATH"/modules/no-updates.am
		chmod a+x "$AMPATH"/modules/no-updates.am
	fi

	source "$AMPATH"/modules/no-updates.am "$@"
	;;

  '-c'|'clean')

  	_no_sudo

	if ! test -f "$AMPATH"/modules/clean.am; then
		wget -q "$AMREPO"/modules/clean.am -O "$AMPATH"/modules/clean.am
		chmod a+x "$AMPATH"/modules/clean.am
	fi

	source "$AMPATH"/modules/clean.am
	;;

  '-d'|'download')

	_no_sudo
	_online_check

	if ! test -f "$AMPATH"/modules/download.am; then
		wget -q "$AMREPO"/modules/download.am -O "$AMPATH"/modules/download.am
		chmod a+x "$AMPATH"/modules/download.am
	fi

	source "$AMPATH"/modules/download.am "$@"
	;;

  '-f'|'files')

  	_no_sudo

	if ! test -f "$AMPATH"/modules/files.am; then
		wget -q "$AMREPO"/modules/files.am -O "$AMPATH"/modules/files.am
		chmod a+x "$AMPATH"/modules/files.am
	fi

	source "$AMPATH"/modules/files.am
	;;

  '-H'|'--home'|'--firejail'|'--sandbox')

	_no_sudo

	if ! test -f "$AMPATH"/modules/sandboxes.am; then
		wget -q "$AMREPO"/modules/sandboxes.am -O "$AMPATH"/modules/sandboxes.am
		chmod a+x "$AMPATH"/modules/sandboxes.am
	fi

	source "$AMPATH"/modules/sandboxes.am "$@"
	;;

  '-i'|'install')

	_online_check

	if ! test -f "$AMPATH"/modules/install.am; then
		wget -q "$AMREPO"/modules/install.am -O "$AMPATH"/modules/install.am
		chmod a+x "$AMPATH"/modules/install.am
	fi

	source "$AMPATH"/modules/install.am "$@"
	;;

  '-R'|'-r'|'remove')

	if ! test -f "$AMPATH"/modules/remove.am; then
		wget -q "$AMREPO"/modules/remove.am -O "$AMPATH"/modules/remove.am
		chmod a+x "$AMPATH"/modules/remove.am
	fi

	source "$AMPATH"/modules/remove.am "$@"
	;;

  '-s'|'sync')

	_no_sudo
	_online_check

	if ! test -f "$AMPATH"/modules/sync.am; then
		wget -q "$AMREPO"/modules/sync.am -O "$AMPATH"/modules/sync.am
		chmod a+x "$AMPATH"/modules/sync.am
	fi

	source "$AMPATH"/modules/sync.am "$@"
	;;

  '-t'|'template')

	_no_sudo
	_online_check

	if ! test -f "$AMPATH"/modules/template.am; then
		wget -q "$AMREPO"/modules/template.am -O "$AMPATH"/modules/template.am
		chmod a+x "$AMPATH"/modules/template.am
	fi

	source "$AMPATH"/modules/template.am "$@"
	;;

  '-u'|'-U'|'update'|'--force-latest') 

	_no_sudo
	_online_check

	if ! test -f "$AMPATH"/modules/update.am; then
		wget -q "$AMREPO"/modules/update.am -O "$AMPATH"/modules/update.am
		chmod a+x "$AMPATH"/modules/update.am
	fi

	source "$AMPATH"/modules/update.am "$@"
	;;

  '--disable-completion')

  	
  	if [ "$(grep -o "$AMCLI" 0<"$COMPLETIONPATH/$COMPLETIONFILE" | head -1)" == "$AMCLI" ]; then
  		grep -v 'complete -W "$(cat '"$AMPATH"'/list 2>/dev/null)" '"$AMCLI"'' "$COMPLETIONPATH/$COMPLETIONFILE" > "$AMPATH"/$COMPLETIONFILE.backup &&
		$SUDOCOMMAND mv "$AMPATH"/$COMPLETIONFILE.backup "$COMPLETIONPATH/$COMPLETIONFILE"
		echo " Completion disabled! "
	else
		echo " Completion script is NOT enabled! "
	fi
	;;

  '--enable-completion')

	if [ "$(grep -o "$AMCLI" 0<"$COMPLETIONPATH/$COMPLETIONFILE" | head -1)" == "$AMCLI" ]; then
		echo " Completion script is already enabled!"
	else
		$SUDOCOMMAND mkdir -p "$COMPLETIONPATH"
		if [ "$AMCLI" == appman ]; then
			if ! test -f "$COMPLETIONPATH/$COMPLETIONFILE"; then
				echo '#!/usr/bin/env bash' >> "$COMPLETIONFILE"
			fi
		else
			echo '#!/usr/bin/env bash' >> "$COMPLETIONFILE"
		fi
		echo 'complete -W "$(cat '"$AMPATH"'/list 2>/dev/null)" '"$AMCLI"'' >> "$COMPLETIONFILE"
		chmod a+x "$COMPLETIONFILE"
		$SUDOCOMMAND mv "$COMPLETIONFILE" "$COMPLETIONPATH/" 2> /dev/null
		echo " Completion has been enabled!"
	fi
	;;

  '--launcher')

	_no_sudo

	if ! test -f "$AMPATH"/modules/launcher.am; then
		wget -q "$AMREPO"/modules/launcher.am -O "$AMPATH"/modules/launcher.am
		chmod a+x "$AMPATH"/modules/launcher.am
	fi

	source "$AMPATH"/modules/launcher.am "$@"
	;;

  '--rollback')

	_no_sudo
	_online_check

	if ! test -f "$AMPATH"/modules/rollback.am; then
		wget -q "$AMREPO"/modules/rollback.am -O "$AMPATH"/modules/rollback.am
		chmod a+x "$AMPATH"/modules/rollback.am
	fi

	source "$AMPATH"/modules/rollback.am "$@"
	;;

  '--user'|'appman')

  	_no_sudo
  	_online_check

	if [ "$AMCLI" == appman ] 2>/dev/null; then
		echo " This function only works for AM"
		exit
	fi

	RED='\033[0;31m'; LightBlue='\033[1;34m'
	if test -f /opt/am/appman; then
		_appman
		echo -e "Please run '${RED}alias am=/opt/am/appman\033[0m' to made 'AM' act exactly like 'AppMan' for\nthe current session or save this command to your '"'~/.bashrc'"' file to make the\nchanges permanent. Visit ${LightBlue}https://github.com/ivan-hc/appman\033[0m for more!"
	else
		_appman
		wget -q "$AMREPO"/APP-MANAGER -O /opt/am/appman && chmod a+x /opt/am/appman
		echo -e "Please run '${RED}alias am=/opt/am/appman\033[0m' to made 'AM' act exactly like 'AppMan' for\nthe current session or save this command to your '"'~/.bashrc'"' file to make the\nchanges permanent."
  	fi
  	;;

  'apikey'|'newrepo')

	_no_sudo
	_online_check

	if ! test -f "$AMPATH"/modules/devtools.am; then
		wget -q "$AMREPO"/modules/devtools.am -O "$AMPATH"/modules/devtools.am
		chmod a+x "$AMPATH"/modules/devtools.am
	fi

	source "$AMPATH"/modules/devtools.am "$@"
	;;

  'nolibfuse')

	_no_sudo
	_online_check

	if ! test -f "$AMPATH"/modules/nolibfuse.am; then
		wget -q "$AMREPO"/modules/nolibfuse.am -O "$AMPATH"/modules/nolibfuse.am
		chmod a+x "$AMPATH"/modules/nolibfuse.am
	fi

	source "$AMPATH"/modules/nolibfuse.am "$@"
	;;

  'version'|'-v'|'--version')

  	echo "6.4";;

  *) exec "$AMCLIPATH" ;;

esac
